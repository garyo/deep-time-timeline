---
export interface Props {
  initialYearsAgo?: number
  apiUrl?: string
  autoUpdateInterval?: number // Auto-update interval in milliseconds (0 to disable)
}

const {
  initialYearsAgo = 10000,
  apiUrl = 'https://timeline-events-api.garyo.workers.dev',
  autoUpdateInterval = 5000
} = Astro.props

// Load category groups server-side
let categoryGroups: Record<string, string[]> = {}
try {
  const response = await fetch(
    new URL('/data/event-categories.json', Astro.url)
  )
  if (response.ok) {
    categoryGroups = await response.json()
  }
} catch (error) {
  console.error('Failed to load event-categories.json:', error)
}
---

<div
  class="timeline-container"
  data-initial-years-ago={initialYearsAgo}
  data-api-url={apiUrl}
  data-auto-update-interval={autoUpdateInterval}
  data-category-groups={JSON.stringify(categoryGroups)}
>
  <div class="timeline-controls">
    <div class="time-display left-time" id="left-time">Loading...</div>
    <div
      class="time-display right-time"
      id="right-time"
      title="Click to reset to current time"
    >
      Loading...
    </div>
    <button
      id="fullscreen-toggle"
      class="fullscreen-btn"
      title="Toggle fullscreen"
    >
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path
          class="expand-icon"
          d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
        ></path>
        <g class="shrink-icon" style="display: none;">
          <path d="M4 14h6m0 0v6m0-6l-6 6"></path>
          <path d="M20 10h-6m0 0V4m0 6l6-6"></path>
        </g>
      </svg>
    </button>
  </div>
  <div class="timeline-container">
    <!-- Heads-up display overlay -->
    <div class="hud-overlay">
      <div class="hud-title">Categories</div>
      <div class="hud-content">
        <div class="hud-group" id="hud-categories">
          <div id="category-checkboxes">
            {/* Master toggle checkbox */}
            <div class="hud-item category-checkbox">
              <label>
                <input
                  type="checkbox"
                  id="category-all-toggle"
                  checked={true}
                />
                All
              </label>
            </div>
            {
              Object.keys(categoryGroups).map((groupName) => (
                <div class="hud-item category-checkbox">
                  <label title={categoryGroups[groupName].join(', ')}>
                    <input
                      type="checkbox"
                      id={`category-${groupName}`}
                      checked={true}
                      data-group-name={groupName}
                    />
                    {groupName}
                  </label>
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>
    <div class="svg-container">
      <svg id="timeline-svg" width="100%" height="100%"></svg>
    </div>
  </div>
  <div class="timeline-info">
    <p>
      Mouse over the timeline to see times. Click and drag to pan. Scroll to
      zoom in.
    </p>
    <p id="hover-info" class="hover-info">&nbsp;</p>
  </div>
</div>

<style>
  .timeline-container {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .timeline-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100svh;
    z-index: 9999;
    background-color: #0a0a0a;
    padding: 20px;
    box-sizing: border-box;
  }

  .timeline-container.fullscreen .timeline-info {
    margin-top: 10px;
    font-size: 12px;
  }

  .timeline-container.fullscreen .timeline-info p:first-child {
    display: none; /* Hide instructions in fullscreen */
  }

  .timeline-controls {
    position: relative;
    height: 40px;
    margin-bottom: 10px;
    flex-shrink: 0;
  }

  .svg-container {
    flex: 1;
    min-height: 0;
    position: relative;
    border: 1px solid #3a3a3a;
    border-radius: 4px;
    background-color: #1a1a1a;
  }

  .hud-overlay {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 200px;
    background-color: rgba(0, 0, 0, 0.1);
    border: 1px solid #4a9eff;
    border-radius: 4px;
    padding: 8px;
    box-sizing: border-box;
    pointer-events: auto;
    z-index: 10;
  }

  .hud-title {
    color: #e0e0e0;
    font-size: 12px;
    font-weight: bold;
    text-align: center;
    margin-bottom: 8px;
  }

  .hud-content {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .hud-item {
    color: #b0b0b0;
    font-size: 10px;
    line-height: 1.2;
  }

  .hud-item span {
    color: #4a9eff;
    font-weight: 500;
  }

  .hud-item label {
    display: flex;
    align-items: center;
    gap: 4px;
    cursor: pointer;
  }

  .hud-item input[type='checkbox'] {
    width: 12px;
    height: 12px;
    accent-color: #4a9eff;
  }

  /* Master toggle checkbox styling */
  #category-all-toggle {
    accent-color: #ff9f1a !important;
  }

  /* Indeterminate state styling */
  #category-all-toggle:indeterminate {
    accent-color: #ffcc66 !important;
  }

  /* Add separator after master toggle */
  .hud-item:has(#category-all-toggle) {
    border-bottom: 1px solid #3a3a3a;
    margin-bottom: 4px;
    padding-bottom: 4px;
  }

  .hud-item input[type='range'] {
    width: 60px;
    height: 12px;
    accent-color: #4a9eff;
    margin-top: 2px;
  }

  .category-checkbox {
    font-size: 0.8rem;
  }

  .time-display {
    position: absolute;
    top: 0;
    font-size: 14px;
    color: #e0e0e0;
    background-color: #2a2a2a;
    padding: 8px 12px;
    border-radius: 4px;
    /*     border: 1px solid #3a3a3a; */
  }

  .left-time {
    left: 0;
  }

  .left-time::after {
    content: '';
    position: absolute;
    bottom: -14px;
    left: 0px;
    width: 0;
    height: 0;
    border-top: 8px solid #2a2a2a;
    border-left: 8px solid #2a2a2a;
    border-right: 8px solid transparent;
    border-bottom: 8px solid transparent;
  }

  .right-time {
    right: 0;
    cursor: pointer;
  }

  .right-time:hover::after {
    content: 'Reset to now';
    position: absolute;
    top: -30px;
    right: 70px;
    background-color: #333;
    color: #fff;
    padding: 5px 8px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    pointer-events: none;
  }

  .right-time::after {
    content: '';
    position: absolute;
    bottom: -14px;
    right: 0px;
    width: 0;
    height: 0;
    border-top: 8px solid #2a2a2a;
    border-right: 8px solid #2a2a2a;
    border-left: 8px solid transparent;
    border-bottom: 8px solid transparent;
  }

  .fullscreen-btn {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    background-color: #2a2a2a;
    border: 1px solid #3a3a3a;
    border-radius: 4px;
    color: #e0e0e0;
    padding: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    height: 40px;
    width: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .fullscreen-btn:hover {
    background-color: #3a3a3a;
    color: #4a9eff;
    transform: translateX(-50%) scale(1.05);
  }

  .fullscreen-btn:active {
    transform: translateX(-50%) scale(0.95);
  }

  .timeline-container.fullscreen .fullscreen-btn .expand-icon {
    display: none;
  }

  .timeline-container.fullscreen .fullscreen-btn .shrink-icon {
    display: block !important;
  }

  #timeline-svg {
    display: block;
    width: 100%;
    height: 100%;
    user-select: none;
    -webkit-user-select: none; /* for Safari */
    -ms-user-select: none; /* for IE/Edge */
  }

  .timeline-info {
    margin-top: 10px;
    text-align: center;
    color: #b0b0b0;
    font-size: 14px;
    flex-shrink: 0;
  }

  .hover-info {
    margin-top: 10px;
    color: #4a9eff;
    font-weight: 500;
    min-height: 20px;
  }

  /* rotated mobile: squeeze things in */
  @media (max-height: 400px) {
    .timeline-controls {
      margin-top: 0px;
      margin-bottom: 8px;
    }
    .timeline-info {
      margin-top: 0px;
    }
  }
</style>

<script>
  import { initializeTimeline } from '../scripts/timeline-client'

  function setupFullscreenToggle() {
    const container = document.querySelector(
      '.timeline-container'
    ) as HTMLElement
    const fullscreenBtn = document.getElementById('fullscreen-toggle')

    if (!fullscreenBtn || !container) return

    let isFullscreen = false

    fullscreenBtn.addEventListener('click', () => {
      isFullscreen = !isFullscreen

      if (isFullscreen) {
        // Enter fullscreen
        try {
          document.body.requestFullscreen()
        } catch (err) {
          // not impl on iOS, ok -- keep going
        }
        container.classList.add('fullscreen')
        // Trigger resize event so timeline adjusts
        setTimeout(() => {
          window.dispatchEvent(new Event('resize'))
        }, 300) // Wait for CSS transition
      } else {
        // Exit fullscreen
        container.classList.remove('fullscreen')
        document.exitFullscreen()
        // Trigger resize event so timeline adjusts
        setTimeout(() => {
          window.dispatchEvent(new Event('resize'))
        }, 300) // Wait for CSS transition
      }
    })

    // When fullscreen exits in any way,
    // set isFullscreen false and set things back
    document.addEventListener('fullscreenchange', () => {
      if (document.fullscreenElement) {
        // Just entered full-screen
      } else {
        // Just exited full-screen (e.g., via ESC)
        container.classList.remove('fullscreen')
        isFullscreen = false
      }
    })

    // Handle ESC key to exit fullscreen
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isFullscreen) {
        fullscreenBtn.click()
      }
    })
  }

  async function initializeApp() {
    const container = document.querySelector(
      '.timeline-container'
    ) as HTMLElement
    const initialYearsAgo = parseInt(
      container.dataset.initialYearsAgo || '10000'
    )
    const apiUrl =
      container.dataset.apiUrl ||
      'https://timeline-events-api.garyo.workers.dev'
    const autoUpdateInterval = parseInt(
      container.dataset.autoUpdateInterval || '5000'
    )

    // Initialize timeline
    await initializeTimeline(
      container,
      initialYearsAgo,
      apiUrl,
      autoUpdateInterval
    )

    // Setup fullscreen toggle
    setupFullscreenToggle()
  }

  // Wait for DOM to load before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp)
  } else {
    // DOM already loaded
    await initializeApp()
  }
</script>
