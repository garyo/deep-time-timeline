---
import eventCategoriesData from '../../public/data/event-categories.json'
import { TimeDisplays } from './TimeDisplays.tsx'
import { Timeline } from './Timeline.tsx'

export interface Props {
  initialYearsAgo?: number
  apiUrl?: string
  autoUpdateInterval?: number // Auto-update interval in milliseconds (0 to disable)
  gestureEnabled?: boolean // Override automatic dev mode gesture detection
}

const {
  initialYearsAgo = 10000,
  apiUrl = 'https://timeline-events-api.garyo.workers.dev',
  autoUpdateInterval = 5000,
  gestureEnabled = import.meta.env.DEV // Default to dev mode, but allow override
} = Astro.props

// Load category groups server-side
let categoryGroups: Record<string, string[]> = {}
try {
  categoryGroups = eventCategoriesData
} catch (error) {
  console.error('Failed to load event-categories.json:', error)
}
---

<div
  class="timeline-container"
  data-initial-years-ago={initialYearsAgo}
  data-api-url={apiUrl}
  data-auto-update-interval={autoUpdateInterval}
  data-category-groups={JSON.stringify(categoryGroups)}
>
  <div class="timeline-controls">
    <!-- SolidJS Time Display Components -->
    <TimeDisplays client:only="solid-js" />
    <button
      id="fullscreen-toggle"
      class="fullscreen-btn"
      title="Toggle fullscreen"
    >
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path
          class="expand-icon"
          d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
        ></path>
        <g class="shrink-icon" style="display: none;">
          <path d="M4 14h6m0 0v6m0-6l-6 6"></path>
          <path d="M20 10h-6m0 0V4m0 6l6-6"></path>
        </g>
      </svg>
    </button>
  </div>
  <!-- Heads-up display overlay -->
  <div class="hud-overlay">
    <div class="hud-header">
      <div class="hud-title" id="hud-title">Timeline Controls</div>
      <button class="hud-toggle" id="hud-toggle" title="Toggle controls">
        <svg
          width="12"
          height="12"
          viewBox="0 0 12 12"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path class="chevron" d="M3 4.5l3 3 3-3"></path>
        </svg>
      </button>
    </div>
    <div class="hud-content" id="hud-content">
      <!-- Categories Section -->
      <div class="hud-section" id="hud-categories-section">
        <div class="hud-section-header" id="categories-section-header">
          <span class="hud-section-title">Categories</span>
          <button
            class="hud-section-toggle"
            id="categories-section-toggle"
            title="Toggle categories"
          >
            <svg
              width="10"
              height="10"
              viewBox="0 0 12 12"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path class="chevron" d="M3 4.5l3 3 3-3"></path>
            </svg>
          </button>
        </div>
        <div class="hud-section-content" id="categories-section-content">
          <div class="hud-group" id="hud-categories">
            <div id="category-checkboxes">
              {/* Master toggle checkbox */}
              <div class="hud-item category-checkbox">
                <label>
                  <input
                    type="checkbox"
                    id="category-all-toggle"
                    checked={true}
                  />
                  All
                </label>
              </div>
              {
                Object.keys(categoryGroups).map((groupName) => (
                  <div class="hud-item category-checkbox">
                    <label title={categoryGroups[groupName].join(', ')}>
                      <input
                        type="checkbox"
                        id={`category-${groupName}`}
                        checked={true}
                        data-group-name={groupName}
                      />
                      {groupName}
                    </label>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <!-- Event Text Size Section -->
      <div class="hud-section collapsed" id="hud-text-size-section">
        <div class="hud-section-header" id="text-size-section-header">
          <span class="hud-section-title">Event Text Size</span>
          <button
            class="hud-section-toggle"
            id="text-size-section-toggle"
            title="Toggle text size"
          >
            <svg
              width="10"
              height="10"
              viewBox="0 0 12 12"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path class="chevron" d="M3 4.5l3 3 3-3"></path>
            </svg>
          </button>
        </div>
        <div class="hud-section-content" id="text-size-section-content">
          <div class="hud-group text-size-controls">
            <div class="text-size-options">
              <label class="text-size-option">
                <input
                  type="radio"
                  name="text-size"
                  value="small"
                  id="text-size-small"
                  checked={true}
                />
                <span>Small</span>
              </label>
              <label class="text-size-option">
                <input
                  type="radio"
                  name="text-size"
                  value="medium"
                  id="text-size-medium"
                />
                <span>Medium</span>
              </label>
              <label class="text-size-option">
                <input
                  type="radio"
                  name="text-size"
                  value="large"
                  id="text-size-large"
                />
                <span>Large</span>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="timeline-content">
    <div class="svg-container">
      <Timeline
        client:only="solid-js"
        initialYearsAgo={initialYearsAgo}
        apiUrl={apiUrl}
        autoUpdateInterval={autoUpdateInterval}
        categoryGroups={categoryGroups}
        gestureEnabled={gestureEnabled}
      />
    </div>
  </div>
  <div class="timeline-info">
    <p>
      Mouse over the timeline to see times. Click and drag to pan. Scroll to
      zoom in.
    </p>
    <p id="hover-info" class="hover-info">&nbsp;</p>
  </div>
</div>

<style>
  .timeline-container {
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .timeline-container.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100svh;
    z-index: 9999;
    background-color: var(--background);
    padding: 20px;
    box-sizing: border-box;
  }

  .timeline-container.fullscreen .timeline-info {
    margin-top: 10px;
    font-size: 12px;
  }

  .timeline-container.fullscreen .timeline-info p:first-child {
    display: none; /* Hide instructions in fullscreen */
  }

  .timeline-controls {
    position: relative;
    height: 40px;
    margin-bottom: 10px;
    flex-shrink: 0;
  }

  .timeline-content {
    flex: 1;
    min-height: 0;
    position: relative;
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease-in-out;
  }

  .svg-container {
    flex: 1;
    min-height: 0;
    position: relative;
    border: 2px solid var(--border);
    border-radius: 6px;
    background-color: var(--timeline-background);
    box-shadow: 0 2px 8px var(--shadow-medium);
    transition: width 0.3s ease-in-out;
  }

  .hud-overlay {
    position: absolute;
    top: 60px; /* Below timeline-controls (40px + 10px margin + 10px spacing) */
    left: 10px;
    width: 200px;
    max-height: calc(
      100% - 70px
    ); /* Account for top offset and bottom margin */
    background-color: var(--hud-background);
    border: 1px solid var(--hud-border);
    border-radius: 6px;
    box-shadow: 0 4px 12px var(--shadow-medium);
    backdrop-filter: blur(8px);
    padding: 8px;
    box-sizing: border-box;
    pointer-events: auto;
    z-index: 10;
    display: flex;
    flex-direction: column;
  }

  .hud-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 8px;
    flex-shrink: 0; /* Prevent header from shrinking */
  }

  .hud-title {
    color: var(--hud-text);
    font-size: 12px;
    font-weight: bold;
    flex-grow: 1;
  }

  .hud-toggle {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 2px;
    transition: all 0.2s ease;
  }

  .hud-toggle:hover {
    color: var(--accent-light);
    background-color: rgba(74, 158, 255, 0.1);
  }

  .hud-toggle .chevron {
    transition: transform 0.3s ease;
    transform-origin: 50% 50%;
  }

  .hud-overlay.collapsed .hud-toggle .chevron {
    transform: rotate(90deg);
  }

  .hud-content {
    display: flex;
    flex-direction: column;
    gap: 6px;
    overflow-y: auto; /* Enable vertical scrolling */
    overflow-x: hidden;
    transition:
      max-height 0.3s ease,
      opacity 0.3s ease;
    max-height: none; /* Remove fixed max-height, let parent control it */
    opacity: 1;
    flex: 1; /* Allow content to grow and enable scrolling */
    min-height: 0; /* Important for flex scrolling */
    overscroll-behavior: contain; /* Prevent scroll chaining */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
  }

  .hud-overlay.collapsed .hud-content {
    max-height: 0;
    opacity: 0;
    margin-top: 0;
  }

  .hud-overlay.collapsed .hud-header {
    margin-bottom: 0;
  }

  /* Custom scrollbar for HUD content */
  .hud-content::-webkit-scrollbar {
    width: 6px;
  }

  .hud-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .hud-content::-webkit-scrollbar-thumb {
    background: var(--text-muted);
    border-radius: 3px;
  }

  .hud-content::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
  }

  /* HUD Section Styles */
  .hud-section {
    margin-bottom: 8px;
  }

  .hud-section:last-child {
    margin-bottom: 12px; /* Extra space at bottom for scroll visibility */
  }

  .hud-section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 4px 0;
    cursor: pointer;
    user-select: none;
  }

  .hud-section-title {
    color: var(--text);
    font-size: 11px;
    font-weight: 600;
    flex-grow: 1;
  }

  .hud-section-toggle {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 2px;
    transition: all 0.2s ease;
  }

  .hud-section-toggle:hover {
    color: var(--accent-light);
    background-color: rgba(74, 158, 255, 0.1);
  }

  .hud-section-toggle .chevron {
    transition: transform 0.3s ease;
    transform-origin: 50% 50%;
  }

  .hud-section.collapsed .hud-section-toggle .chevron {
    transform: rotate(-90deg);
  }

  .hud-section-content {
    overflow: hidden;
    transition:
      max-height 0.3s ease,
      opacity 0.3s ease,
      margin-top 0.3s ease;
    max-height: 500px;
    opacity: 1;
    margin-top: 4px;
  }

  .hud-section.collapsed .hud-section-content {
    max-height: 0;
    opacity: 0;
    margin-top: 0;
  }

  .hud-item {
    color: var(--text-secondary);
    font-size: 10px;
    line-height: 1.2;
  }

  .hud-item span {
    color: var(--accent-light);
    font-weight: 500;
  }

  .hud-item label {
    display: flex;
    align-items: center;
    gap: 4px;
    cursor: pointer;
  }

  .hud-item input[type='checkbox'] {
    width: 12px;
    height: 12px;
    accent-color: var(--accent-light);
  }

  /* Master toggle checkbox styling */
  #category-all-toggle {
    accent-color: #ff9f1a !important;
  }

  /* Indeterminate state styling */
  #category-all-toggle:indeterminate {
    accent-color: #ffcc66 !important;
  }

  /* Add separator after master toggle */
  .hud-item:has(#category-all-toggle) {
    border-bottom: 1px solid var(--border);
    margin-bottom: 4px;
    padding-bottom: 4px;
  }

  .hud-item input[type='range'] {
    width: 60px;
    height: 12px;
    accent-color: var(--accent-light);
    margin-top: 2px;
  }

  .category-checkbox {
    font-size: 0.8rem;
    line-height: 1.7;
  }

  /* Text Size Controls */
  .text-size-controls {
    padding: 4px 0;
  }

  .text-size-options {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .text-size-option {
    display: flex;
    align-items: center;
    gap: 4px;
    cursor: pointer;
    font-size: 10px;
    color: var(--text-secondary);
  }

  .text-size-option:hover {
    color: var(--text);
  }

  .text-size-option input[type='radio'] {
    width: 12px;
    height: 12px;
    accent-color: var(--accent-light);
    cursor: pointer;
  }

  .text-size-option span {
    font-weight: normal;
    color: inherit;
  }
  /* Mobile: larger checkboxes, more bg opacity */
  @media (max-width: 768px) {
    .category-checkbox {
      font-size: 1.1rem;
    }

    /* more opaque background on mobile */
    html.theme-light .hud-overlay {
      background-color: rgba(250, 250, 250, 0.9);
    }

    html.theme-dark .hud-overlay {
      background-color: rgba(0, 0, 0, 0.9);
    }
  }

  .fullscreen-btn {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--surface);
    border: 1px solid var(--border);
    border-radius: 6px;
    box-shadow: 0 2px 4px var(--shadow-light);
    color: var(--text);
    padding: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    height: 40px;
    width: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .fullscreen-btn:hover {
    background-color: var(--surface-elevated);
    color: var(--accent-light);
    transform: translateX(-50%) scale(1.05);
    box-shadow: 0 4px 8px var(--shadow-medium);
  }

  .fullscreen-btn:active {
    transform: translateX(-50%) scale(0.95);
  }

  .timeline-container.fullscreen .fullscreen-btn .expand-icon {
    display: none;
  }

  .timeline-container.fullscreen .fullscreen-btn .shrink-icon {
    display: block !important;
  }

  #timeline-svg {
    display: block;
    width: 100%;
    height: 100%;
    user-select: none;
    -webkit-user-select: none; /* for Safari */
    -ms-user-select: none; /* for IE/Edge */
  }

  .timeline-info {
    margin-top: 10px;
    text-align: center;
    color: var(--text-secondary);
    font-size: 12px;
    flex-shrink: 0;
    min-height: 50px; /* Ensure minimum space for two lines of text */
  }

  .timeline-info p {
    margin-top: 5px;
    margin-bottom: 5px;
  }

  .hover-info {
    margin-top: 10px;
    color: var(--accent-light);
    font-weight: 500;
    min-height: 20px;
  }

  /* rotated mobile: squeeze things in */
  @media (max-height: 400px) {
    .timeline-controls {
      margin-top: 0px;
      margin-bottom: 8px;
    }
    .timeline-info {
      margin-top: 0px;
    }
    .timeline-info p {
      margin: 0;
    }
  }
</style>

<script>
  function setupFullscreenToggle() {
    const container = document.querySelector(
      '.timeline-container'
    ) as HTMLElement
    const fullscreenBtn = document.getElementById('fullscreen-toggle')

    if (!fullscreenBtn || !container) return

    let isFullscreen = false

    fullscreenBtn.addEventListener('click', () => {
      isFullscreen = !isFullscreen

      if (isFullscreen) {
        // Enter fullscreen
        try {
          document.body.requestFullscreen()
        } catch (err) {
          // not impl on iOS, ok -- keep going
        }
        container.classList.add('fullscreen')
        // Trigger resize event so timeline adjusts
        setTimeout(() => {
          window.dispatchEvent(new Event('resize'))
        }, 300) // Wait for CSS transition
      } else {
        // Exit fullscreen
        container.classList.remove('fullscreen')
        document.exitFullscreen()
        // Trigger resize event so timeline adjusts
        setTimeout(() => {
          window.dispatchEvent(new Event('resize'))
        }, 300) // Wait for CSS transition
      }
    })

    // When fullscreen exits in any way,
    // set isFullscreen false and set things back
    document.addEventListener('fullscreenchange', () => {
      if (document.fullscreenElement) {
        // Just entered full-screen
      } else {
        // Just exited full-screen (e.g., via ESC)
        container.classList.remove('fullscreen')
        isFullscreen = false
      }
    })

    // Handle ESC key to exit fullscreen
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isFullscreen) {
        fullscreenBtn.click()
      }
    })
  }

  function setupHUDToggle() {
    const hudOverlay = document.querySelector('.hud-overlay') as HTMLElement
    const hudToggle = document.getElementById('hud-toggle') as HTMLButtonElement
    const hudTitle = document.getElementById('hud-title') as HTMLElement

    if (!hudToggle || !hudOverlay) return

    function handleResize() {
      const viewportHeight = window.innerHeight
      const isCurrentlyCollapsed = hudOverlay.classList.contains('collapsed')

      // Auto-collapse on small screens
      if (viewportHeight < 600 && !isCurrentlyCollapsed) {
        hudOverlay.classList.add('collapsed')
      }
      // Auto-expand on larger screens (unless user manually closed it)
      else if (viewportHeight > 700 && isCurrentlyCollapsed) {
        hudOverlay.classList.remove('collapsed')
      }
    }

    hudToggle.addEventListener('click', () => {
      hudOverlay.classList.toggle('collapsed')
    })
    hudTitle.addEventListener('click', () => {
      hudOverlay.classList.toggle('collapsed')
    })

    // Listen for resize events
    window.addEventListener('resize', handleResize)

    // Run initial check
    handleResize()
  }

  function setupHUDSectionToggles() {
    // Categories section
    const categoriesSection = document.getElementById(
      'hud-categories-section'
    ) as HTMLElement
    const categoriesHeader = document.getElementById(
      'categories-section-header'
    ) as HTMLElement
    const categoriesToggle = document.getElementById(
      'categories-section-toggle'
    ) as HTMLButtonElement

    if (categoriesSection && categoriesHeader && categoriesToggle) {
      const toggleSection = () => {
        categoriesSection.classList.toggle('collapsed')
      }
      categoriesToggle.addEventListener('click', (e) => {
        e.stopPropagation()
        toggleSection()
      })
      categoriesHeader.addEventListener('click', toggleSection)
    }

    // Text Size section
    const textSizeSection = document.getElementById(
      'hud-text-size-section'
    ) as HTMLElement
    const textSizeHeader = document.getElementById(
      'text-size-section-header'
    ) as HTMLElement
    const textSizeToggle = document.getElementById(
      'text-size-section-toggle'
    ) as HTMLButtonElement

    if (textSizeSection && textSizeHeader && textSizeToggle) {
      const toggleSection = () => {
        textSizeSection.classList.toggle('collapsed')
      }
      textSizeToggle.addEventListener('click', (e) => {
        e.stopPropagation()
        toggleSection()
      })
      textSizeHeader.addEventListener('click', toggleSection)
    }
  }

  function setupTextSizeControls() {
    // Import the text size store dynamically
    import('../stores/text-size-store.ts').then(
      ({ textSizeActions, textSize }) => {
        const textSizeRadios = document.querySelectorAll(
          'input[name="text-size"]'
        ) as NodeListOf<HTMLInputElement>

        // Set initial state from store
        const currentSize = textSize()
        textSizeRadios.forEach((radio) => {
          if (radio.value === currentSize) {
            radio.checked = true
          }
        })

        // Listen for changes
        textSizeRadios.forEach((radio) => {
          radio.addEventListener('change', () => {
            if (radio.checked) {
              const newSize = radio.value as 'small' | 'medium' | 'large'
              textSizeActions.setTextSize(newSize)
            }
          })
        })
      }
    )
  }

  function initializeApp() {
    // Setup fullscreen toggle
    setupFullscreenToggle()

    // Setup HUD toggle
    setupHUDToggle()

    // Setup HUD section toggles
    setupHUDSectionToggles()

    // Setup text size controls
    setupTextSizeControls()
  }

  // Wait for DOM to load before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp)
  } else {
    // DOM already loaded
    initializeApp()
  }
</script>
